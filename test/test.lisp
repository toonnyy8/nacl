(ql:quickload "nacl")

(let* ((a 1)
       (a (* a 2))
       (a (* a 2))) 
  a)
(t/sum 2 '(1 2 3) :keepdim t)

(numcl:asarray (numcl:ones '(2)))
(numcl:ones '(2))
(numcl:asarray '(1 1))

(nacl:t/new '((1 2) (3 4)))

(numcl:< (numcl:* (numcl:ones '(2 3)) -1) (numcl:zeros '(2 3)))

(let* ((a (nacl:t/ones '(2 3 4)))
       (b (nacl:t/full '(2 2 4) 2))
       (c (nacl:t/cat `(,a ,(nacl:t/* b b)) 1))
       (c (nacl:t/* c c)))
  (print (nacl:t/shape c))
  (print (nacl:t/data c))
  ;;(nacl:t/bw d (list a b c)))
  (map 'list (lambda (x) (print (nacl:t/data x))) (nacl:t/bw c (list a b))))

(let* ((a (nacl:t/ones '(2 2 4)))
       (b (nacl:t/full '(2 2 4) 2))
       (c (nacl:t/stack `(,a ,(nacl:t/* b b)) 1))
       (c (nacl:t/* c c)))
  (print (nacl:t/shape c))
  (print (nacl:t/data c))
  ;;(nacl:t/bw d (list a b c)))
  (map 'list (lambda (x) (print (nacl:t/data x))) (nacl:t/bw c (list a b))))

(let* ((a (nacl:t/new '((1 3 4) (-2 4 -7))))
       (bc (nacl:t/split a '(1 2) 1))
       (b (nth 0 bc))
       (c (nth 1 bc))
       (l1 (nacl:t/* b c))
       (efg (nacl:t/unstack a 1))
       (e (nth 0 efg))
       (f (nth 1 efg))
       (g (nth 2 efg))
       (l2 (nacl:t/* g (nacl:t/- e f))))
  (print (mapcar #'nacl:t/data bc))
  (print (mapcar #'nacl:t/data efg))
  ;;(nacl:t/bw d (list a b c)))
  (map 'list (lambda (x) (print (nacl:t/data x))) (nacl:t/bw l1 `(,a)))
  (map 'list (lambda (x) (print (nacl:t/data x))) (nacl:t/bw l2 `(,a))))


(let* ((a (nacl:t/ones '(2 3 4)))
       (b (nacl:t/mean a '(0 2) :keepdim t))
       (b (nacl:t/* b b)))
  (print (nacl:t/data a))
  ;;(nacl:t/bw d (list a b c)))
  (map 'list (lambda (x) (print (nacl:t/data x))) (nacl:t/bw b (list a))))

(let* ((a (nacl:t/full '(1) 10))
       (a-reshape (nacl:t/reshape a '(1 1 1)))
       (da (car (nacl:t/bw a-reshape (list a))))
       (d²a (car (nacl:t/bw da (list a))))
       (d³a (car (nacl:t/bw d²a (list a))))
       (d⁴a (car (nacl:t/bw d³a (list a)))))
  (list (nacl:t/data da)
        (nacl:t/data d²a)
        (nacl:t/data d³a)
        (nacl:t/data d⁴a)))

(let* ((a (nacl:t/new '(1 -2)))
       (b (nacl:t/new '(3)))
       (c (nacl:t/- a b)))
  (print (nacl:t/data c))
  ;;(nacl:t/bw d (list a b c)))
  (map 'list (lambda (x) (print (nacl:t/data x))) (nacl:t/bw c (list a b))))


(let* ((a (nacl:t/new '((1) (-2))))
       (b (nacl:t/new '((3 4))))
       (c (nacl:t/matmul a b))
       (d (nacl:f/relu c))
       (e (nacl:t/* d d)))
  (print (nacl:t/data c))
  (print (nacl:t/data d))
  (print (nacl:t/data e))
  ;;(nacl:t/bw d (list a b c)))
  (map 'list (lambda (x) (print (nacl:t/data x))) (nacl:t/bw e (list a b))))


(let* ((a (nacl:t/full '(1) 2.))
       (b (nacl:t/full '(1) 5.))
       (c (nacl:t/full '(1) 3.))
       (d (nacl:t/expt (nacl:t/+ a b) c)))
  ;;(nacl:t/bw d (list a b c)))
  (map 'list (lambda (x) (print (nacl:t/data x))) (nacl:t/bw d (list a b c))))

(let* ((a (nacl:t/full '(1) 10))
       (a³ (nacl:t/expt a (nacl:t/full '(1) 3)))
       (da (car (nacl:t/bw a³ (list a))))
       (d²a (car (nacl:t/bw da (list a))))
       (d³a (car (nacl:t/bw d²a (list a))))
       (d⁴a (car (nacl:t/bw d³a (list a)))))
  (list (nacl:t/data da)
        (nacl:t/data d²a)
        (nacl:t/data d³a)
        (nacl:t/data d⁴a)))

(let* ((a (nacl:t/full '(1) 10))
       (-a (nacl:t/- a))
       (da (car (nacl:t/bw a (list a))))
       (d-a (car (nacl:t/bw -a (list a)))))
  (list (nacl:t/data a)
        (nacl:t/data -a)
        (nacl:t/data da)
        (nacl:t/data d-a)))

